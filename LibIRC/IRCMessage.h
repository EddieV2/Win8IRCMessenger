// -----------------------------------------------------------------------------
// IRC Client (Systems Programming Project)
// Written by Tim Leonard
// -----------------------------------------------------------------------------
#pragma once

#include <pch.h>

namespace LibIRC
{
	// Forward references.
	ref class IRCChannel;
	ref class IRCServer;
	ref class IRCCommand;
	ref class IRCUser;
	
	/// <summary>
	/// Dictates what style of message a message is. (plain/server/etc).
	/// <summary>
	public enum class IRCMessageType : int
	{
		IRC_MESSAGE_TYPE_NORMAL,		// General chat messages.
		IRC_MESSAGE_TYPE_ACTION,		// /me style message.
		IRC_MESSAGE_TYPE_NOTICE,		// Red error message.
		IRC_MESSAGE_TYPE_ACTIVE,		// "Active" message, eg "joined server"
		IRC_MESSAGE_TYPE_PASSIVE		// "Passive" message, eg. "left server", "connecting"
	};

	/// <summary>
	/// The IRC message class is used to store user-friendly messages which
	/// can be directly shown in UI.
	/// <summary>
	public ref class IRCMessage sealed
	{
	private:

		IRCChannel^				m_origin;
		IRCCommand^				m_command;
		Platform::String^		m_friendly;
		IRCMessageType			m_messageType;
		IRCUser^				m_user;
		
		// This is kept private because we don't ever want the user of this library changing
		// the origin of this message, that should be something only ever done internally.
		property IRCChannel^ OriginInternal
		{
            void set(IRCChannel^ value)	{ m_origin = value; }
		}

	public:
		
		// ------------------------------------------------------------------------------------
		// Public properties.
		// ------------------------------------------------------------------------------------

		/// <summary>
		/// Gets the channel this command originated from.
		/// </summary>
		property IRCChannel^ Origin
		{
            IRCChannel^ get()	{ return m_origin; }
		}

		/// <summary>
		/// Gets the friendly user-viewable string for this message.
		/// </summary>
		property Platform::String^ Friendly
		{
            Platform::String^ get()	{ return m_friendly; }
		}
		
		/// <summary>
		/// Gets the command this message was generated by.
		/// </summary>
		property IRCCommand^ Command
		{
            IRCCommand^ get()	{ return m_command; }
		}
		
		/// <summary>
		/// Gets the user this message is refering to.
		/// </summary>
		property IRCUser^ User
		{
            IRCUser^ get()		{ return m_user; }
		}
		
		/// <summary>
		/// Gets what type of message this is (plain/action/etc).
		/// </summary>
		property IRCMessageType Type
		{
            IRCMessageType get()	{ return m_messageType; }
		}
		
		// ------------------------------------------------------------------------------------
		// Public methods.
		// ------------------------------------------------------------------------------------
		IRCMessage(IRCChannel^ origin, IRCCommand^ command, IRCMessageType type, Platform::String^ friendly);
		IRCMessage(IRCChannel^ origin, IRCCommand^ command, IRCMessageType type, Platform::String^ friendly, IRCUser^ user);
		virtual ~IRCMessage();

		// Just so we can change the origin when we need to, but not allow
		// anyone using this class to do so.
		friend ref class IRCServer;
	};

}